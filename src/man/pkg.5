'\" te
.\" Copyright (c) 2007, 2011, Oracle and/or its
.\" affiliates. All rights reserved.
.\" Copyright (c) 2012, OmniTI Computer Consulting, Inc. All rights reserved.
.TH pkg 5 "29 Jul 2011" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
pkg \- Image Packaging System
.SH DESCRIPTION
.sp
.LP
The image packaging system, \fBpkg\fR(5), is a framework that provides for software lifecycle management (installation, upgrade, and removal). Image packaging manages software in units of packages, which are collections of actions, defined by a set of key/value pairs and possibly a data payload. In many cases, actions are files found in a file system, but they also represent other installable objects, such as drivers, services, and users.
.SH PACKAGE FMRIS AND VERSIONS
.sp
.LP
Each package is represented by a fault management resource identifier (FMRI) with the scheme \fBpkg:\fR. The full FMRI for a package consists of the scheme, a publisher, the package name, and a version string in the following format:
.sp
.in +2
.nf
pkg://opensolaris.org/library/libc@5.11,5.11-0.75:20071001T163427Z
.fi
.in -2
.sp

.sp
.LP
\fBopensolaris.org\fR is the publisher. \fBlibrary/libc\fR is the package name. Although the namespace is hierarchical and arbitrarily deep, there is no enforced containment; the name is essentially arbitrary. The publisher information is optional, but must be preceded by \fBpkg://\fR if present. An FMRI that includes the publisher is often referred to as being "fully qualified." If publisher information is not present, then the package name should generally be preceded by \fBpkg:/\fR.
.sp
.LP
Packaging clients often allow the scheme of an FMRI to be omitted if it does not contain publisher information. For example, \fBpkg:/library/libc\fR can be written as \fBlibrary/libc\fR. If the scheme is omitted, clients also allow omission of all but the last component of a package name for matching purposes. For example, \fBlibrary/libc\fRcould be written as \fBlibc\fR, which would then match packages named \fBlibc\fR or package names ending in \fB/libc\fR.
.sp
.LP
A publisher name identifies a person, group of persons, or an organization as the source of one or more packages. To avoid publisher name collisions and help identify the publisher, a best practice is to use a domain name that represents the entity publishing the packages as a publisher name.
.sp
.LP
The version follows the package name, separated by an at sign (@). The version consists of four sequences of numbers, separated by punctuation. The elements in the first three sequences are separated by dots, and the sequences are arbitrarily long. Leading zeros in version components (for example, 01.1 or 1.01) are not permitted. Trailing zeros (for example, 1.10) are permitted.
.sp
.LP
The first part of the version is the component version. For components tightly bound to the operating system, this is usually the value of \fBuname -r\fR for that version of the operating system. For a component with its own development lifecycle, this sequence is a dotted release number, such as 2.4.10.
.sp
.LP
The second part of the version, which if present must follow a comma (,), is the build version. The build version specifies what version of the operating system the contents of the package were built on, providing a minimum bound on which operating system version the contents can be expected to run successfully.
.sp
.LP
The third part of the version, which if present must follow a hyphen (\fB-\fR), is the branch version. The branch version is a versioning component that provides vendor-specific information. The branch version can be incremented when the packaging metadata is changed, independently of the component version. The branch version might contain a build number or other information.
.sp
.LP
The fourth part of the version, which if present must follow a colon (:), is a timestamp. The timestamp represents when the package was published.
.sp
.LP
When performing comparisons between versions, no component of the full version is considered unless the components to its left are the same. Thus, "4.3-1" is greater than "4.2-7" because "4.3" is greater than "4.2", and "4.3-3" is greater than "4.3-1" because "3" is greater than "1".
.sp
.LP
Many parts of the system, when appropriate, abridge FMRIs when displaying them, and accept input in shorter forms to reduce the volume of information displayed or required. Typically, the scheme, publisher, build version, and timestamp can be elided. Sometimes all of the versioning information can be omitted.
.SH ACTIONS
.sp
.LP
Actions represent the installable objects on a system. Actions are described in the manifest of a package. Every action consists primarily of its name and a key attribute. Together, these refer to a unique object as it follows a version history. Actions can have other attributes. Some attributes are interpreted directly by the packaging system. Other attributes might be useful only to the system administrator or the end-user.
.sp
.LP
Actions have a simple text representation:
.sp
.in +2
.nf
\fIaction_name\fR \fIattribute1\fR=\fIvalue1\fR \fIattribute2\fR=\fIvalue2\fR ...
.fi
.in -2

.sp
.LP
Names of attributes cannot have whitespace, quotation marks, or equals signs (=) in them. All characters after the first equals sign belong to the value. Values can have all of those, though spaces must be enclosed in single or double quotation marks. Single quotation marks do not need to be escaped inside a string that is enclosed in double quotation marks, and double quotation marks do not need to be escaped inside a string that is enclosed in single quotation marks. A quotation mark can be prefixed with a backslash (\\) character to avoid terminating the quoted string. A backslash can be escaped with a backslash.
.sp
.LP
Attributes can be named more than once with multiple values. These are treated as unordered lists.
.sp
.LP
Actions with many attributes can create long lines in a manifest file. Such lines can be wrapped by terminating each incomplete line with a backslash. Note that this continuation character must occur between attribute/value pairs. Neither attributes nor their values nor the combination can be split.
.sp
.LP
The attributes listed below are not an exhaustive set. In fact, the attributes that can be attached to an action are arbitrary, and the standard sets of attributes are easy to augment to incorporate future developments.
.sp
.LP
Certain action attributes cause additional operations to be executed outside of the packaging context. These attributes are documented in the "Actuators" section below.
.SS "File Actions"
.sp
.LP
The \fBfile\fR action represents an ordinary file. The \fBfile\fR action references a payload, and has four standard attributes:
.sp
.ne 2
.mk
.na
\fB\fBpath\fR\fR
.ad
.RS 9n
.rt  
The file system path where the file is installed. This is a \fBfile\fR action's key attribute. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBmode\fR\fR
.ad
.RS 9n
.rt  
The access permissions (in numeric form) of the file. These are simple permissions only, not ACLs. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBowner\fR\fR
.ad
.RS 9n
.rt  
The name of the user that owns the file. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup\fR\fR
.ad
.RS 9n
.rt  
The name of the group that owns the file. 
.RE

.sp
.LP
The payload is a positional attribute in that it is not named. It is the first word after the action name. In a published manifest, it is the \fBSHA-1\fR hash of the file contents. If present in a manifest that has yet to be published, it represents the path where the payload can be found. See \fBpkgsend\fR(1). The hash attribute can be used instead of the positional attribute, should the value include an equals sign. Both can be used in the same action. However, the hashes must be identical.
.sp
.LP
Other attributes include:
.sp
.ne 2
.mk
.na
\fB\fBpreserve\fR\fR
.ad
.RS 12n
.rt  
This specifies that the file's contents should not be overwritten on upgrade if the contents are determined to have changed since the file was installed or last upgraded. On initial installs, if an existing file is found, the file is salvaged (stored in \fB/var/pkg/lost+found\fR).
.sp
If the value of \fBpreserve\fR is \fBrenameold\fR, then the existing file is renamed with the extension \fB\&.old\fR, and the new file is put in its place.
.sp
If the value of \fBpreserve\fR is \fBrenamenew\fR, then the existing file is left alone, and the new file is installed with the extension \fB\&.new\fR.
.sp
If the value of \fBpreserve\fR is \fBlegacy\fR, then this file is not installed for initial package installs. On upgrades, any existing file is renamed with the extension \fB\&.legacy\fR, and then the new file is put in its place.
.sp
If the value of \fBpreserve\fR is \fBtrue\fR (or a value not listed above, such as \fBstrawberry\fR), then the existing file is left alone, and the new file is not installed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBoverlay\fR\fR
.ad
.RS 12n
.rt  
This specifies whether the action allows other packages to deliver a file at the same location or whether it delivers a file intended to overlay another. This functionality is intended for use with configuration files that do not participate in any self-assembly (for example, \fB/etc/motd\fR) and that can be safely overwritten.
.sp
If \fBoverlay\fR is not specified, multiple packages cannot deliver files to the same location.
.sp
If the value of \fBoverlay\fR is \fBallow\fR, one other package is allowed to deliver a file to the same location. This value has no effect unless the \fBpreserve\fR attribute is also set.
.sp
If the value of \fBoverlay\fR is \fBtrue\fR, the file delivered by the action overwrites any other action that has specified \fBallow\fR. Changes to the installed file are preserved based on the value of the \fBpreserve\fR attribute of the overlaying file. On removal, the contents of the file are preserved if the action being overlaid is still installed, regardless of whether the \fBpreserve\fR attribute was specified. Only one action can overlay another, and the \fBmode\fR, \fBowner\fR, and \fBgroup\fR attributes must match.
.RE

.sp
.LP
Files can also be "tasted," and depending on the flavor, can have additional attributes. For ELF files, the following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBelfarch\fR\fR
.ad
.RS 17n
.rt  
The architecture of the ELF file. This is the output of \fBuname -p\fRon the architecture for which the file is built.
.RE

.sp
.ne 2
.mk
.na
\fB\fBelfbits\fR\fR
.ad
.RS 17n
.rt  
This is \fB32\fR or \fB64\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBelfhash\fR\fR
.ad
.RS 17n
.rt  
This is the hash of the "interesting" ELF sections in the file. These are the sections that are mapped into memory when the binary is loaded. These are the only sections necessary to consider when determining whether the executable behavior of two binaries will differ.
.RE

.sp
.ne 2
.mk
.na
\fB\fBoriginal_name\fR\fR
.ad
.RS 17n
.rt  
This attribute is used to handle editable files moving from package to package or from place to place, or both. The form this takes is the name of the originating package, followed by a colon and the original path to the file. Any file being deleted is recorded either with its package and path, or with the value of the \fBoriginal_name\fR attribute if specified. Any editable file being installed that has the \fBoriginal_name\fR attribute set uses the file of that name if it is deleted as part of the same packaging operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrevert-tag\fR\fR
.ad
.RS 17n
.rt  
This attribute is used to tag editable files that should be reverted as a set. Multiple revert-tag values can be specified. The file reverts to its manifest-defined state when \fBpkg revert\fR is invoked with any of those tags specified. See \fBpkg\fR(1).
.RE

.SS "Directory Actions"
.sp
.LP
The \fBdir\fR action is like the \fBfile\fR action in that it represents a file system object. The \fBdir\fR action represents a directory instead of an ordinary file. The \fBdir\fR action has the same four standard attributes as the \fBfile\fR action, and \fBpath\fR is the key attribute.
.sp
.LP
Directories are reference counted in IPS. When the last package that either explicitly or implicitly references a directory no longer does so, that directory is removed. If that directory contains unpackaged file system objects, those items are moved into \fB$IMAGE_META/lost+found\fR. See the "Files" section for more information about \fB$IMAGE_META\fR.
.sp
.LP
To move unpackaged contents into a new directory, the following attribute might be useful:
.sp
.ne 2
.mk
.na
\fB\fBsalvage-from\fR\fR
.ad
.RS 16n
.rt  
This names a directory of salvaged items. A directory with such an attribute inherits on creation the salvaged directory contents if they exist.
.RE

.SS "Link Actions"
.sp
.LP
The \fBlink\fR action represents a symbolic link. The \fBlink\fR action has the following standard attributes:
.sp
.ne 2
.mk
.na
\fB\fBpath\fR\fR
.ad
.sp .6
.RS 4n
The file system path where the symbolic link is installed. This is a \fBlink\fR action's key attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBtarget\fR\fR
.ad
.sp .6
.RS 4n
The target of the symbolic link. The file system object to which the link resolves.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator\fR\fR
.ad
.sp .6
.RS 4n
Specifies the entry in the mediation namespace shared by all path names participating in a given mediation group (for example, \fBpython\fR). Link mediation can be performed based on \fBmediator-version\fR and/or \fBmediator-implementation\fR.  All mediated links for a given path name must specify the same mediator. However, not all mediator versions and implementations need to provide a link at a given path. If a mediation does not provide a link, then the link is removed when that mediation is selected. A \fBmediator\fR, in combination with a specific version and/or implementation represents a mediation that can be selected for use by the packaging system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-version\fR\fR
.ad
.sp .6
.RS 4n
Specifies the version (expressed as a dot-separated sequence of nonnegative integers) of the interface described by the \fBmediator\fR attribute. This attribute is required if \fBmediator\fR is specified and \fBmediator-implementation\fR is not. A local system administrator can set the version to use explicitly. The value specified should generally match the version of the package delivering the link (for example, \fBruntime/python-26\fR should use \fBmediator-version=2.6\fR), although this is not required.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-implementation\fR\fR
.ad
.sp .6
.RS 4n
Specifies the implementation of the mediator for use in addition to or instead of the \fBmediator-version\fR. Implementation strings are not considered to be ordered and a string is arbitrary selected by \fBpkg\fR(5) if not explicitly specified by a system administrator.
.sp
The value can be a string of arbitrary length composed of alphanumeric characters and spaces.  If the implementation itself can be versioned or is versioned, then the version should be specified at the end of the string, after a @ (expressed as a dot-separated sequence of nonnegative integers). If multiple versions of an implementation exist, the default behavior is to select the implementation with the greatest version.
.sp
If only one instance of an implementation mediation link at a particular path is installed on a system, then that one is chosen automatically. If future links at the path are installed, the link is not switched unless a vendor, site, or local override applies, or if one of the links is version mediated.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-priority\fR\fR
.ad
.sp .6
.RS 4n
When resolving conflicts in mediated links, \fBpkg\fR(5) normally chooses the link with the greatest value of \fBmediator-version\fR or based on \fBmediator-implementation\fR if that is not possible. This attribute is used to specify an override for the normal conflict resolution process.
.sp
If this attribute is not specified, the default mediator selection logic is applied.
.sp
If the value is \fBvendor\fR, the link is preferred over those that do not have a \fBmediator-priority\fR specified.
.sp
If the value is \fBsite\fR, the link is preferred over those that have a value of \fBvendor\fR or that do not have a \fBmediator-priority\fR specified.
.sp
A local system administrator can override the selection logic described above.
.RE

.SS "Hardlink Actions"
.sp
.LP
The \fBhardlink\fR action represents a hard link. It has the same attributes as the \fBlink\fR action, and \fBpath\fR is also its key attribute.
.SS "Driver Actions"
.sp
.LP
The \fBdriver\fR action represents a device driver. The \fBdriver\fR action does not reference a payload. The driver files themselves must be installed as \fBfile\fR actions. The following attributes are recognized (see \fBadd_drv\fR(1M) for more information):
.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.RS 15n
.rt  
The name of the driver. This is usually, but not always, the file name of the driver binary. This is the \fBdriver\fR action's key attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBalias\fR\fR
.ad
.RS 15n
.rt  
This represents an alias for the driver. A given driver can have more than one \fBalias\fR attribute. No special quoting rules are necessary.
.RE

.sp
.ne 2
.mk
.na
\fB\fBclass\fR\fR
.ad
.RS 15n
.rt  
This represents a driver class. A given driver can have more than one \fBclass\fR attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBperms\fR\fR
.ad
.RS 15n
.rt  
This represents the file system permissions for the driver's device nodes.
.RE

.sp
.ne 2
.mk
.na
\fB\fBclone_perms\fR\fR
.ad
.RS 15n
.rt  
This represents the file system permissions for the clone driver's minor nodes for this driver.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpolicy\fR\fR
.ad
.RS 15n
.rt  
This specifies additional security policy for the device. A given driver can have more than one \fBpolicy\fR attribute, but no minor device specification can be present in more than one attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBprivs\fR\fR
.ad
.RS 15n
.rt  
This specifies privileges used by the driver. A given driver can have more than one \fBprivs\fR attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdevlink\fR\fR
.ad
.RS 15n
.rt  
This specifies an entry in \fB/etc/devlink.tab\fR. The value is the exact line to go into the file, with tabs denoted by \fB\\t\fR. See \fBdevlinks\fR(1M) for more information. A given driver can have more than one \fBdevlink\fR attribute.
.RE

.SS "Depend Actions"
.sp
.LP
The \fBdepend\fR action represents an inter-package dependency. A package can depend on another package because the first requires functionality in the second for the functionality in the first to work, or even to install. Dependencies can be optional. If a dependency is not met at the time of installation, the packaging system attempts to install or update the dependent package to a sufficiently new version, subject to other constraints.
.sp
.LP
The following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBfmri\fR\fR
.ad
.RS 14n
.rt  
The FMRI representing the dependent package. This is the \fBdependency\fR action's key attribute. The \fBfmri\fR value must not include the publisher. The package name is assumed to be complete. Dependencies of type \fBrequire-any\fR can have multiple \fBfmri\fR attributes. A version is optional on the \fBfmri\fR value, though for some types of dependencies, an \fBfmri\fR with no version has no meaning.
.RE

.sp
.ne 2
.mk
.na
\fB\fBtype\fR\fR
.ad
.RS 14n
.rt  
The type of the dependency.
.sp
If the value is \fBrequire\fR, then the dependency is required and must have a version equal to or greater than the version specified in the \fBfmri\fR attribute. If the version is not specified, any version satisfies the dependency. A package cannot be installed if any of its required dependencies cannot be satisfied.
.sp
If the value is \fBoptional\fR, then the dependency, if present, must be at the specified version level or greater.
.sp
If the value is \fBexclude\fR, then the containing package cannot be installed if the dependency is present at the specified version level or greater. If no version is specified, the dependent package cannot be installed concurrently with the package specifying the dependency.
.sp
If the value is \fBincorporate\fR, then the dependency is optional, but the version of the dependent package is constrained. See "Constraints and Freezing" below.
.sp
If the value is \fBrequire-any\fR, then any one of multiple dependent packages as specified by multiple \fBfmri\fR attributes can satisfy the dependency, following the same rules as the \fBrequire\fR dependency type.
.sp
If the value is \fBconditional\fR, the dependency is required only if the package defined by the \fBpredicate\fR attribute is present on the system.
.sp
If the value is \fBorigin\fR, the dependency must, if present, be at the specified value or better on the image to be modified prior to installation. If the value of the \fBroot-image\fR attribute is \fBtrue\fR, the dependency must be present on the image rooted at / in order to install this package.
.sp
If the value is \fBgroup\fR, the dependency is required unless the package is on the image avoid list. Note that obsolete packages silently satisfy the group dependency. See the \fBavoid\fR subcommand in \fBpkg\fR(1).
.sp
If the value is \fBparent\fR, then the dependency is ignored if the image is not a child image. If the image is a child image then the dependency is required to be present in the parent image. The package version matching for a \fBparent\fR dependency is the same as that used for \fBincorporate\fR dependencies.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpredicate\fR\fR
.ad
.RS 14n
.rt  
The FMRI representing the predicate for \fBconditional\fR dependencies.
.RE

.sp
.ne 2
.mk
.na
\fB\fBroot-image\fR\fR
.ad
.RS 14n
.rt  
Has an effect only for \fBorigin\fR dependencies as mentioned above.
.RE

.SS "License Actions"
.sp
.LP
The \fBlicense\fR action represents a license or other informational file associated with the package contents. A package can deliver licenses, disclaimers, or other guidance to the package installer through the use of the \fBlicense\fR action.
.sp
.LP
The payload of the \fBlicense\fR action is delivered into the image metadata directory related to the package, and should only contain human-readable text data. It should not contain HTML or any other form of markup. Through attributes, \fBlicense\fR actions can indicate to clients that the related payload must be displayed and/or require acceptance of it. The method of display and/or acceptance is at the discretion of clients.
.sp
.LP
The following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBlicense\fR\fR
.ad
.RS 16n
.rt  
This is a \fBlicense\fR action's key attribute. This attribute provides a meaningful description for the license to assist users in determining the contents without reading the license text itself. Some example values include:
.RS +4
.TP
.ie t \(bu
.el o
ABC Co. Copyright Notice
.RE
.RS +4
.TP
.ie t \(bu
.el o
ABC Co. Custom License
.RE
.RS +4
.TP
.ie t \(bu
.el o
Common Development and Distribution License 1.0 (CDDL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
GNU General Public License 2.0 (GPL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
GNU General Public License 2.0 (GPL) Only
.RE
.RS +4
.TP
.ie t \(bu
.el o
MIT License
.RE
.RS +4
.TP
.ie t \(bu
.el o
Mozilla Public License 1.1 (MPL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
Simplified BSD License
.RE
Wherever possible, including the version of the license in the description is recommended as shown above. The \fBlicense\fR value must be unique within a package.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmust-accept\fR\fR
.ad
.RS 16n
.rt  
When \fBtrue\fR, this license must be accepted by a user before the related package can be installed or updated. Omission of this attribute is equivalent to \fBfalse\fR. The method of acceptance (interactive or configuration-based, for example) is at the discretion of clients.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmust-display\fR\fR
.ad
.RS 16n
.rt  
When \fBtrue\fR, the action's payload must be displayed by clients during packaging operations. Omission of this value is equivalent to \fBfalse\fR. This attribute should not be used for copyright notices, only actual licenses or other material that must be displayed during operations. The method of display is at the discretion of clients.
.RE

.SS "Legacy Actions"
.sp
.LP
The \fBlegacy\fR action represents package data used by a legacy packaging system. The attributes associated with this action are added into the legacy system's databases so that the tools querying those databases can operate as if the legacy package were actually installed. In particular, this should be sufficient to convince the legacy system that the package named by the \fBpkg\fR attribute is installed on the system, so that the package can be used to satisfy dependencies.
.sp
.LP
The following attributes, named in accordance with the parameters on \fBpkginfo\fR(4), are recognized:
.sp
.ne 2
.mk
.na
\fB\fBcategory\fR\fR
.ad
.RS 12n
.rt  
The value for the \fBCATEGORY\fR parameter. The default value is \fBsystem\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdesc\fR\fR
.ad
.RS 12n
.rt  
The value for the \fBDESC\fR parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhotline\fR\fR
.ad
.RS 12n
.rt  
The value for the \fBHOTLINE\fR parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.RS 12n
.rt  
The value for the \fBNAME\fR parameter. The default value is \fBnone provided\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg\fR\fR
.ad
.RS 12n
.rt  
The abbreviation for the package being installed. The default value is the name from the FMRI of the package. This is a \fBlegacy\fR action's key attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvendor\fR\fR
.ad
.RS 12n
.rt  
The value for the \fBVENDOR\fR parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBversion\fR\fR
.ad
.RS 12n
.rt  
The value for the VERSION parameter. The default value is the version from the FMRI of the package.
.RE

.SS "Set Actions"
.sp
.LP
The \fBset\fR action represents a package-level attribute, or metadata, such as the package description.
.sp
.LP
The following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.RS 9n
.rt  
The name of the attribute.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvalue\fR\fR
.ad
.RS 9n
.rt  
The value given to the attribute.
.RE

.sp
.LP
The \fBset\fR action can deliver any metadata the package author chooses. However, there are a number of well defined attribute names that have specific meaning to the packaging system.
.sp
.ne 2
.mk
.na
\fB\fBinfo.classification\fR\fR
.ad
.RS 23n
.rt  
One or more tokens that a \fBpkg\fR(5) client can use to classify the package. The value should have a scheme (such as "org.opensolaris.category.2008" or "org.acm.class.1998") and the actual classification, such as "Applications/Games", separated by a colon (:).
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.description\fR\fR
.ad
.RS 23n
.rt  
A detailed description of the contents and functionality of the package, typically a paragraph or so in length.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.obsolete\fR\fR
.ad
.RS 23n
.rt  
When \fBtrue\fR, the package is marked obsolete. An obsolete package can have no actions other than more set actions, and must not be marked renamed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.renamed\fR\fR
.ad
.RS 23n
.rt  
When \fBtrue\fR, the package has been renamed. There must be one or more \fBdepend\fR actions in the package as well that point to the package versions to which this package has been renamed. A package cannot be marked both renamed and obsolete, but otherwise can have any number of set actions.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.summary\fR\fR
.ad
.RS 23n
.rt  
A short, one-line description of the package.
.RE

.SS "Group Actions"
.sp
.LP
The \fBgroup\fR action defines a UNIX group as defined in \fBgroup\fR(4). No support is present for group passwords. Groups defined with this action initially have no user list. Users can be added with the \fBuser\fR action. The following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBgroupname\fR\fR
.ad
.RS 13n
.rt  
The value for the name of the group.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgid\fR\fR
.ad
.RS 13n
.rt  
The group's unique numerical id. The default value is the first free group under 100.
.RE

.SS "User Actions"
.sp
.LP
The \fBuser\fR action defines a UNIX user as defined in \fB/etc/passwd\fR, \fB/etc/shadow\fR, \fB/etc/group\fR, and \fB/etc/ftpd/ftpusers\fR files. Users defined with this attribute have entries added to the appropriate files.
.sp
.LP
The following attributes are recognized:
.sp
.ne 2
.mk
.na
\fB\fBusername\fR\fR
.ad
.RS 15n
.rt  
The unique name of the user
.RE

.sp
.ne 2
.mk
.na
\fB\fBpassword\fR\fR
.ad
.RS 15n
.rt  
The encrypted password of the user. Default value is \fB*LK*\fR. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBuid\fR\fR
.ad
.RS 15n
.rt  
The unique uid of the user. Default value is first free value under 100.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup\fR\fR
.ad
.RS 15n
.rt  
The name of the user's primary group. Must be found in \fB/etc/group\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgcos-field\fR\fR
.ad
.RS 15n
.rt  
The value of the \fBgcos\fR field in \fB/etc/passwd\fR. Default value is \fBusername\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhome-dir\fR\fR
.ad
.RS 15n
.rt  
The user's home directory. Default value is /.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlogin-shell\fR\fR
.ad
.RS 15n
.rt  
The user's default shell. Default value is empty.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup-list\fR\fR
.ad
.RS 15n
.rt  
Secondary groups to which the user belongs. See \fBgroup\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBftpuser\fR\fR
.ad
.RS 15n
.rt  
Can be set to \fBtrue\fR or \fBfalse\fR. The default value of \fBtrue\fR indicates that the user is permitted to login via FTP. See \fBftpusers\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBlastchg\fR\fR
.ad
.RS 15n
.rt  
The number of days between January 1, 1970, and the date that the password was last modified. Default value is empty. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBmin\fR\fR
.ad
.RS 15n
.rt  
The minimum number of days required between password changes. This field must be set to 0 or above to enable password aging. Default value is empty. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBmax\fR\fR
.ad
.RS 15n
.rt  
The maximum number of days the password is valid. Default value is empty. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBwarn\fR\fR
.ad
.RS 15n
.rt  
The number of days before password expires that the user is warned. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBinactive\fR\fR
.ad
.RS 15n
.rt  
The number of days of inactivity allowed for that user. This is counted on a per-machine basis. The information about the last login is taken from the machine's \fBlastlog\fR file. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBexpire\fR\fR
.ad
.RS 15n
.rt  
An absolute date expressed as the number of days since the UNIX Epoch (January 1, 1970). When this number is reached, the login can no longer be used. For example, an expire value of 13514 specifies a login expiration of January 1, 2007. See \fBshadow\fR(4).
.RE

.sp
.ne 2
.mk
.na
\fB\fBflag\fR\fR
.ad
.RS 15n
.rt  
Set to empty. See \fBshadow\fR(4).
.RE

.SH ACTUATORS
.sp
.LP
In certain contexts, additional operations can be appropriate to execute in preparation for or following the introduction of a particular action. These additional operations are generally needed only on a live system image, and are operating system specific. When multiple actions involved in a package installation or removal have identical actuators, then the operation corresponding to actuator presence is executed once for that installation or removal.
.sp
.LP
Incorrectly specified actuators can result in package installation failure, if the actuator cannot determine a means of making safe installation progress.
.sp
.LP
The following actuators are defined:
.sp
.ne 2
.mk
.na
\fB\fBreboot-needed\fR\fR
.ad
.sp .6
.RS 4n
Can be set to \fBtrue\fR or \fBfalse\fR. If an action with this actuator set to \fBtrue\fR is installed or updated during a package installation, then the packaging transaction can be advertised as requiring a reboot. Certain client implementations might take additional steps, such as performing the entire package operation using a clone of the image, in the case that the image is the live system image.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdisable_fmri\fR, \fBrefresh_fmri\fR, \fBrestart_fmri\fR, \fBsuspend_fmri\fR\fR
.ad
.sp .6
.RS 4n
Each of these actuators takes the value of an FMRI of a service instance to operate on during the package installation or removal. \fBdisable_fmri\fR causes the given FMRI to be disabled prior to action removal, per the \fBdisable\fR subcommand to \fBsvcadm\fR(1M). \fBrefresh_fmri\fR and \fBrestart_fmri\fR cause the given FMRI to be refreshed or restarted after action installation or update, per the respective subcommands of \fBsvcadm\fR(1M). Finally, \fBsuspend_fmri\fR causes the given FMRI to be disabled temporarily prior to the action install phase, and then enabled after the completion of that phase.
.sp
The value can contain a pattern that matches multiple service instances. However, it must do so explicitly with a glob as accepted by \fBsvcs\fR(1), rather than doing so implicitly by not indicating any instances.
.RE

.SH CONSTRAINTS AND FREEZING
.sp
.LP
When a package is transitioned to a new version, or when it is added to or removed from the system, the version that is chosen, or whether removal is allowed, is determined by a variety of constraints put on the package. Those constraints can be defined by other packages in the form of dependencies, or by the administrator in the form of freezes.
.sp
.LP
The most common form of constraint is delivered by the \fBrequire\fR dependency, as described in "Depend Actions" above. Such a constraint prevents the package from being downgraded or removed.
.sp
.LP
Most parts of the operating system are encapsulated by packages called \fBincorporations\fR. These packages primarily deliver constraints represented by the \fBincorporate\fR dependency.
.sp
.LP
As described above, an incorporated package need not be present on the system, but if it is, then it specifies both an inclusive minimum version and an exclusive maximum version. For example, if the dependent FMRI has a version of 1.4.3, then no version less than 1.4.3 would satisfy the dependency, and neither would any version greater than or equal to 1.4.4.  However, versions that merely extended the dotted sequence, such as 1.4.3.7, would be allowed.
.sp
.LP
Incorporations are used to force parts of the system to upgrade synchronously. For some components, such as the C library and the kernel, this is a basic requirement. For others, such as a simple userland component on which nothing else has a dependency, the synchronous upgrade is used merely to provide a known and tested set of package versions that can be referred to by a particular version of the incorporation.
.sp
.LP
Since an incorporation is simply a package, it can be removed, and all the constraints it delivers are therefore relaxed. However, many of the incorporations delivered by OmniOS are required by the packages they incorporate because that relaxation would not be safe.
.sp
.LP
Attempting an upgrade of a package to a version that is not allowed by an installed incorporation will not attempt to find a newer version of the incorporation in order to satisfy the request, but will instead fail. If the constraint itself must be moved, and the incorporation specifying it cannot be removed, then the incorporation must be upgraded to a version that specifies a desired version of the constraint. Upgrading an incorporation causes all of the incorporated packages that would not satisfy the constraints delivered by the new version to be upgraded as well.
.sp
.LP
A system administrator can constrain a package by using the \fBpkg freeze\fR command. The named package is constrained to the version installed on the system if no version is provided.  If a versioned package is provided, then this administrative constraint, or freeze, acts as if an incorporate dependency were installed where the \fBfmri\fR attribute had the value of the provided package version.
.sp
.LP
A freeze is never be lifted automatically by the packaging system. To relax a constraint, use the \fBpkg unfreeze\fR command.
.SH PUBLISHERS AND REPOSITORIES
.sp
.LP
As detailed above, a publisher is simply a name that package clients use to identify the provider of packages. Publishers can distribute their packages using package repositories and/or package archives. There are two types of repositories currently supported by the package system: origin repositories and mirror repositories.
.sp
.LP
An \fBorigin\fR is a package repository that contains all of the metadata (such as catalogs, manifests, and search indexes) and content (files) for one or more packages. If multiple origins are configured for a given publisher in an image, the package client API attempts to choose the best origin to retrieve package data from. This is the most common type of repository, and is implicitly created whenever \fBpkgsend\fR or \fBpkgrecv\fR is used on a package repository.
.sp
.LP
A \fBmirror\fR is a package repository that contains only package content (files). If one or more mirrors are configured for a given publisher in an image, the client API prefers the mirrors for package content retrieval and attempts to choose the best one to retrieve package content from. If the mirror is unreachable, does not have the required content, or is slower, the client API retrieves the content from any configured origin repositories. Mirrors are intended for content sharing among a trusted set of clients using the dynamic mirror functionality of \fBpkg.depotd\fR(1M). Mirrors are also intended to be used to authenticate access to package metadata, but distribute the package content without authentication. For example, a client might be configured with an \fBhttps\fR origin that requires an SSL key and certificate pair to access, and with an \fBhttp\fR mirror that provides the package content. In this way, only authorized clients can install or update the packages, while the overhead of authentication for package content retrieval is avoided. A mirror can be created by removing all subdirectories of a repository except those named \fBfile\fR and their parents. An origin repository can be also be provisioned as a mirror by using the mirror mode of \fBpkg.depotd\fR(1M).
.SH PROPERTIES
.sp
.LP
Images can have one or more properties associated with them. These properties can be used to store information about the purpose, content, and behavior of the image. See \fBpkg\fR(1) for a complete list.
.SH IMAGE POLICIES
.sp
.LP
Policies are defined by image properties with boolean values. The supported policies include:
.sp
.ne 2
.mk
.na
\fB\fBflush-content-cache-on-success\fR\fR
.ad
.sp .6
.RS 4n
When true, the cache of downloaded files is erased after a successful install of a package. Default value: \fBTrue\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsend-uuid\fR\fR
.ad
.sp .6
.RS 4n
When true, a unique identifier (UUID) that identifies the image to the publisher is sent on all requests. Default value: \fBTrue\fR.
.RE

.SH FILES
.sp
.LP
Since \fBpkg\fR(5) images can be located arbitrarily within a larger file system, the token \fB$IMAGE_ROOT\fR is used to distinguish relative paths. For a typical system installation, \fB$IMAGE_ROOT\fR is equivalent to /.
.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_ROOT/var/pkg\fR\fR
.ad
.sp .6
.RS 4n
Metadata directory for a full or partial image.
.RE

.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_ROOT/.org.opensolaris,pkg\fR\fR
.ad
.sp .6
.RS 4n
Metadata directory for a user image.
.RE

.sp
.LP
Within the metadata of a particular image, certain files and directories can contain information useful during repair and recovery. The token \fB$IMAGE_META\fR is used to refer to the top-level directory that contains the metadata. \fB$IMAGE_META\fR is typically one of the two paths given above.
.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_META/lost+found\fR\fR
.ad
.RS 26n
.rt  
Location of conflicting directories and files moved during a package operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_META/publisher\fR\fR
.ad
.RS 26n
.rt  
Contains a directory for each publisher. Each directory stores publisher-specific metadata.
.RE

.sp
.LP
Other paths within the \fB$IMAGE_META\fR directory hierarchy are Private, and are subject to change.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Availability\fBpackage/pkg\fR
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBpkg\fR(1), \fBpkgsend\fR(1), \fBpkg.depotd\fR(1M), \fBsvcadm\fR(1M), \fBpkginfo\fR(4)
.sp
.LP
\fBhttp://hub.opensolaris.org/bin/view/Project+pkg/\fR
